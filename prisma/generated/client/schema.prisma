generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionMethod {
  PIX
  DEBIT
  CREDIT
}

model Card {
  id         Int     @id @default(autoincrement())
  nickname   String
  issuerId   Int
  userId     Int
  number     String? @unique
  expiration String?
  cvv        String?
  debit      Boolean @default(false)
  credit     Boolean @default(false)

  // Foreign keys
  issuer Issuer @relation(fields: [issuerId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  // Relations
  creditCard  CreditCard?
  debitCard   DebitCard?
  transaction Transaction[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id            Int   @id @default(autoincrement())
  creditLimit   Float
  currentCredit Float @default(0.0)
  cardId        Int   @unique

  // Foreign keys
  card Card @relation(fields: [cardId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebitCard {
  id      Int   @id @default(autoincrement())
  balance Float @default(0.0)
  cardId  Int   @unique

  // Foreign keys
  card Card @relation(fields: [cardId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issuer {
  id    Int     @id @default(autoincrement())
  name  String
  color String
  icon  String?

  // Relations
  card Card[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          Int               @id @default(autoincrement())
  type        TransactionType
  amount      Float
  date        DateTime
  method      TransactionMethod
  cardId      Int
  userId      Int
  currency    String            @default("USD")
  description String?

  // Foreign keys
  card Card @relation(fields: [cardId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  cpf      String? @unique
  phone    String?

  // Relations
  card     Card[]
  sessions Session[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  expires      DateTime

  // Foreign keys
  user User @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Card {
  id            Int     @id @default(autoincrement())
  name          String
  number        String? @unique
  expiration    String?
  cvv           String?
  description   String?
  issuerId      Int
  acceptsDebit  Boolean @default(false)
  acceptsCredit Boolean @default(false)

  // Relations
  Issuer     Issuer      @relation(fields: [issuerId], references: [id])
  CreditCard CreditCard?
  DebitCard  DebitCard?

  Transaction Transaction[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id            Int   @id @default(autoincrement())
  creditLimit   Float
  currentCredit Float @default(0.0)
  cardId        Int   @unique

  // Relations
  Card Card @relation(fields: [cardId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebitCard {
  id      Int   @id @default(autoincrement())
  balance Float @default(0.0)
  cardId  Int   @unique

  // Relations
  Card Card @relation(fields: [cardId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issuer {
  id    Int     @id @default(autoincrement())
  name  String
  color String
  icon  String?

  // Relations
  Card Card[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          Int      @id @default(autoincrement())
  isEarning   Boolean
  amount      Float
  date        DateTime
  method      String
  description String?
  cardId      Int
  userId      Int

  // Relations
  Card Card @relation(fields: [cardId], references: [id])
  User User @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
  cpf   String? @unique
  phone String?

  // Relations
  Transaction Transaction[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

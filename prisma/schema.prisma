// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "./generated/client"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id    Int    @id @default(autoincrement())
    name  String
    email String @unique

    // Relationships
    transactions Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Card {
    id          Int     @id @default(autoincrement())
    name        String // e.g., "Visa", "MasterCard"
    number      String? @unique
    expiration  String?
    cvv         String?
    description String? // e.g., "Gold", "Platinum"
    acceptsDebit  Boolean @default(false)
    acceptsCredit Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


    // Relationships
    transactions Transaction[]
    creditCard   CreditCard? // Optional relationship for credit cards
    debitCard    DebitCard? // Optional relationship for debit cards

}

model CreditCard {
    id            Int   @id @default(autoincrement())
    cardId        Int   @unique // One-to-one relation with card
    creditLimit   Float // Total credit limit
    currentCredit Float @default(0.0) // Current credit used

    // Relationships
    card Card @relation(fields: [cardId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DebitCard {
    id      Int   @id @default(autoincrement())
    cardId  Int   @unique // One-to-one relation with card
    balance Float @default(0.0) // Current balance

    // Relationships
    card Card @relation(fields: [cardId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id          Int      @id @default(autoincrement())
    isEarning   Boolean // true if earning, false if spending
    amount      Float
    date        DateTime
    method      String // "Pix", "debit", "credit", etc.
    category    String // "food", "medical", "necessary", etc.
    description String?
    cardId      Int
    userId      Int

    // Relationships
    card Card @relation(fields: [cardId], references: [id])
    user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

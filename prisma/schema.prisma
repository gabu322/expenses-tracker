generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id    Int     @id @default(autoincrement())
    name  String
    email String  @unique
    cpf   String? @unique
    phone String?

    Transaction Transaction[]
    // Card        Card[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Card {
    id            Int     @id @default(autoincrement())
    name          String
    number        String? @unique
    expiration    String?
    cvv           String?
    description   String?
    acceptsDebit  Boolean @default(false)
    acceptsCredit Boolean @default(false)
    // userId        Int
    // issuerId      Int

    // Relationships
    transactions Transaction[]
    creditCard   CreditCard? // Optional relationship for credit cards
    debitCard    DebitCard?

    // issuer Issuer @relation(fields: [issuerId], references: [id]) // Relationship with Issuer
    // user   User   @relation(fields: [userId], references: [id]) // Relationship with User

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CreditCard {
    id            Int   @id @default(autoincrement())
    creditLimit   Float
    currentCredit Float @default(0.0)
    cardId        Int   @unique

    // Relationships
    card Card @relation(fields: [cardId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DebitCard {
    id      Int   @id @default(autoincrement())
    balance Float @default(0.0)
    cardId  Int   @unique

    // Relationships
    card Card @relation(fields: [cardId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id          Int      @id @default(autoincrement())
    isEarning   Boolean // true if earning, false if spending
    amount      Float
    date        DateTime
    method      String
    description String?
    cardId      Int
    userId      Int

    // Relationships
    card Card @relation(fields: [cardId], references: [id])
    user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Issuer {
    id    Int     @id @default(autoincrement())
    name  String
    color String
    icon  String?

    // Relationships
    // cards Card[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
